@page "/"
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<secton class="lobby-main">

    <h3 class="text-red-700">Lobby</h3>

    @if (currentRoom is null)
    {
        <input @bind="playerName" placeholder="Your name" />
        <input @bind="currentRoomName" placeholder="Room name" />
        <button @onclick="CreateRoom">Create</button>
        if (currentRoom is null && rooms.Count() >= 4)
        {
            <h1>Currently a maximum number of rooms was reached, please wait for some to free up.</h1>
        }
        <h3>Rooms: </h3>
        <ul>
            @foreach (var room in rooms)
            {
                <li>@room.RoomName (@room.Players.Count()/2) <button @onclick="()=> JoinRoom(room.RoomId)">Join</button></li>
            }
        </ul>
        <Chat HubConnection="hubConnection" MyPlayerId="@myPlayerId" MyPlayerName="@playerName" />

    }
    else
    {
        <CascadingValue Value="hubConnection">
            <Room CurrentRoom="currentRoom" MyPlayerId="@myPlayerId" MyPlayerName="@playerName" />
        </CascadingValue>
    }
</secton>



@code {
    private HubConnection? hubConnection;
    public string? myPlayerId;
    private string playerName = string.Empty;
    private string currentRoomName = string.Empty;
    private GameRoom? currentRoom = null;
    private List<GameRoom> rooms = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<List<GameRoom>>(ConnectionStrings.Rooms, roomList =>
        {
            Console.WriteLine($"Got rooms. Count = {roomList.Count()}");
            rooms = roomList;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        myPlayerId = hubConnection.ConnectionId;
    }

    private async Task CreateRoom()
    {
        if (hubConnection is null)
        {
            return;
        }
        currentRoom = await hubConnection.InvokeAsync<GameRoom>("CreateRoom", currentRoomName, playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (hubConnection is null)
        {
            return;
        }

        var joinedRoom = await hubConnection.InvokeAsync<GameRoom>("JoinRoom", roomId, playerName);

        if (joinedRoom is not null)
        {
            currentRoom = joinedRoom;
        }
        else
        {
            Console.WriteLine("Room is full or does not exist");
        }
    }

}
