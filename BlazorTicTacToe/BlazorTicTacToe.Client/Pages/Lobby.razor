@page "/"
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))


<section class="w-full h-full flex flex-col text-white">
    <div class="mt-2 flex mr-2">
        @if (_playerName != string.Empty && _playerName is not null)
        {
            <h1 class="text-3xl ml-auto">Hi, @_playerName</h1>
        }
    </div>

    @if (_playerName == string.Empty || _playerName is null)
    {
        <div class="mt-6 mx-auto">
            <h3 class="text-xl text-center">Please enter your player name.</h3>
            <form class="flex mx-1 mt-3 text-lg">                
                <input class="py-1 pl-2 bg-inherit peer focus:border-[#998C3A] focus:outline-none rounded-l-xl border border-black" @bind="PlayerName" placeholder="Player name..." />               
                <button class="px-2 hover:bg-white/25 active:bg-white/25 peer-focus:border-[#998C3A] rounded-r-xl border border-black" @onclick="SetName" disabled=@(PlayerName.Trim() == string.Empty)>Set Name</button>
            </form>
        </div>
    }
    
    <div class="flex flex-col justify-center gap-8 mt-12">
        @if (currentRoom is null && _playerName != string.Empty && _playerName is not null)
        {           
            <form class="text-lg flex justify-center" @onsubmit="CreateRoom">               
                <input class="p-2 sm:w-[75%] md:w-[50%] 2xl:w-[25%] bg-inherit peer focus:border-[#998C3A] focus:outline-none rounded-l-xl border border-black" @bind="currentRoomName" placeholder="Room name" />
                <button type="submit" class="px-2 hover:bg-white/25 active:bg-white/25 peer-focus:border-[#998C3A] rounded-r-xl border border-black" disabled=@(currentRoomName.Trim() == string.Empty)>Create</button>
            </form>
            if (currentRoom is null && rooms.Count() >= 100)
            {                
                <h1 class="mx-2 text-center text-red-700 text-xl font-bold">
                    Currently a maximum number of rooms was reached, please wait for
                    some to free up.
                </h1>
            }
            if (rooms.Count() > 0)
            {                
                <div class="mx-3 md:mx-auto md:w-[75%] xl:w-[35%]">                   
                    <h3 class="text-xl">Available Rooms: </h3>                    
                    <ul class="mt-2 border border-black rounded-xl p-2 pb-3">
                        @foreach (var room in rooms)
                        {                           
                            <li class="flex mt-2 text-wrap break-all">                                
                                <h5 class="text-lg">
                                    @room.RoomName
                                </h5>                                
                                <small class="ml-1 mt-1 opacity-60">
                                    (@room.Players.Count()/2)
                                </small>
                                @if (room.Players.Count() < 2)
                                {
                                    <button class="ml-auto px-4 break-normal border border-black rounded-full hover:bg-white/[0.1]" @onclick="()=> JoinRoom(room.RoomId)">
                                        Join
                                    </button>
                                }
                            </li>
                        }
                    </ul>
                </div>
            }
            <div class="mt-4 mx-2 lg:mx-auto lg:w-[50%] xl:absolute xl:mx-0 xl:w-96 xl:top-[17%] xl:left-4 2xl:w-[450px] 2xl:top-[18%] 2xl:left-32">
                <Chat HubConnection="hubConnection" MyPlayerId="@myPlayerId" MyPlayerName="@_playerName" />
            </div>
        }
        else
        {
            <CascadingValue Value="hubConnection">
                <Room CurrentRoom="currentRoom" MyPlayerId="@myPlayerId" MyPlayerName="@_playerName" />
            </CascadingValue>
        }
    </div>
</section>


@code {
    private HubConnection? hubConnection;
    public string? myPlayerId;
    private string _playerName = string.Empty;
    private string currentRoomName = string.Empty;
    private GameRoom? currentRoom = null;
    private List<GameRoom> rooms = new();
    public string PlayerName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
        .Build();


        hubConnection.On<List<GameRoom>>(ConnectionStrings.Rooms, roomList =>
        {
            rooms = roomList;
            StateHasChanged();
        });


        await hubConnection.StartAsync();
        myPlayerId = hubConnection.ConnectionId;
    }


    private async Task CreateRoom()
    {
        if (hubConnection is null)
        {
            return;
        }
        currentRoom = await hubConnection.InvokeAsync<GameRoom>("CreateRoom", currentRoomName, _playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (hubConnection is null)
        {
            return;
        }

        var joinedRoom = await hubConnection.InvokeAsync<GameRoom>("JoinRoom", roomId, _playerName);

        if (joinedRoom is not null)
        {
            currentRoom = joinedRoom;
        }
        else
        {
            Console.WriteLine("Room is full or does not exist");
        }
    }
    private async Task SetName()
    {
        _playerName = PlayerName;
        if (hubConnection is null)
        {
            return;
        }
        await hubConnection.InvokeAsync("ReceiveChat", "Lobby");
    }
}
